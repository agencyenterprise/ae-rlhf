"""
Copies the pretraining data and labels for a given run.

The labelling process for pretraining is very time-consuming and since the pretraining
data is generated by a random agent it won't fundamentally change across experiments.
Therefore, when starting a new experiment it can be helpful to bootstrap it by 
copying the data and labels from a previous experiment.
"""

from dataclasses import dataclass

import tyro
from sqlmodel import select

from ae_rlhf.app import crud
from ae_rlhf.app.database import Session
from ae_rlhf.app.models import Pair, Run


@dataclass
class Args:
    """Copies the database entries for the pretraining data and labels.

    Important!  This does not actually copy data, but links the data from one run
    to another.  This avoids having the same pretrain data stored for different
    experiments, but if you every delete the data for the original run then it will
    break any pretraining pairs that were copied from it.
    """

    source_run: str
    """ID of the run to copy the data from"""
    target_run: str
    """ID of the run to copy the data to"""


def main():
    args = tyro.cli(Args)
    with Session() as db:
        pairs = crud.read_pairs(db, run_name=args.source_run, iteration=0)
        if len(pairs) == 0:
            print("No pairs found for run", args.source_run)

        for pair in pairs:
            print("Copying pair", pair.id)
            pair_dict = pair.model_dump()
            pair_dict.pop("id")
            new_pair = Pair(**pair_dict)
            new_pair.segments = pair.segments
            run = db.exec(select(Run).where(Run.name == args.target_run)).first()
            if run is None:
                new_run = Run(name=args.target_run, env_id=pair.run.env_id)
                run = crud.create_run(db, new_run)
            new_pair.run = run

            # check if pair already exists before writing
            exist_pairs = crud.read_pairs(
                db,
                run_name=args.target_run,
                iteration=new_pair.iteration,
            )

            segment_ids = set(
                [segment.id for pair in exist_pairs for segment in pair.segments]
            )

            if all(seg.id in segment_ids for seg in new_pair.segments):
                print("Pair already exists, skipping", pair.id)

            else:
                _ = crud.create_pair(db, pair=new_pair)


if __name__ == "__main__":
    main()
